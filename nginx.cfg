############################################
### Конфигурация для сайта okfilm.com.ua ###
############################################


# Пришлось увеличить, так как слишком длинные адреса сайтов
server_names_hash_bucket_size  64;

# Eсли был передан заголовок "Upgrade: websocket",
# тогда присваиваем переменной $connection_upgrade значение "upgrade".
# Иначе значением этой переменной будет пустая строка.
map $http_upgrade $connection_upgrade {
    websocket     'upgrade';
    default       '';
}

# Определение, из локальной или глобальной сети пришел пользователь.
geo $network_type {
    default         'global';
    192.168.0.0/16  'local';
    134.249.139.195 'flat';
}

# Формат логов для логирования нарушений Content-Security-Policy
log_format postdata escape=json
    '$remote_addr - [$time_local] "$request" $status - $request_body - "$http_user_agent"';


# Вспомогательные uri, доступные по http
# и редирект с http на https
server {
    listen              80 default_server;
    keepalive_timeout   70;
    charset             utf-8;
    include /etc/nginx/includes/okfilm/common_locations.conf;

    location /availability_check {
        # не пишем в лог запросы от мониторилки, а то засырает логи
        if ($http_user_agent ~* "^OkFILM Monitoring") { access_log off; }
        default_type application/json;
        return 200 '{"code":"available", "message":"Availability check is successful"}';
    }
    location = /back/devices_control/wifi {     # запрос состояния Wi-Fi обрабатываем без https чтобы не грузить роутер
        if ($network_type = 'local') { access_log off; }    # не пишем в лог запросы от роутера, а то засырает логи
        if ($network_type = 'flat')  { access_log off; }    # не пишем в лог запросы от роутера, а то засырает логи
        proxy_pass http://127.0.0.1:8738;                   # проксируем на эрланг
        proxy_http_version 1.1;
    }
    location /robots.txt {
        root /srv/okfilm_2018;
        try_files $uri =404;
    }
    location / {
        return 301 https://$host$request_uri;
    }
#    location / {
#        root /var/www/html;
#        index index.html index.htm index.nginx-debian.html;
#        try_files $uri $uri/ =404;
#    }
}


# Основной сайт okfilm.com.ua
server {
    server_name         okfilm.com.ua;
    listen              443 ssl http2 default_server;
    keepalive_timeout   70;
    charset             utf-8;      # задаём кодировку отдаваемого контента (правильно именно utf-8 через дефис)
    include /etc/nginx/includes/okfilm/common_locations.conf;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";    # нужен для ssl_stapling
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_session_cache       shared:SSL:10m;
    ssl_session_timeout     30m;
    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    # Правила Content-Security-Policy
    set $CSP_DEFAULT    "default-src 'self'";
    set $CSP_BLOCK      "block-all-mixed-content";
    set $CSP_FONT       "font-src 'self' data:";
    set $CSP_IMG        "img-src 'self' https://cdn.okfilm.com.ua https://www.google-analytics.com https://www.googletagmanager.com https://img.youtube.com https://i.vimeocdn.com";
    set $CSP_STYLE      "style-src 'self' 'unsafe-inline'";
    set $CSP_SCRIPT     "script-src 'self' 'unsafe-inline' https://www.google-analytics.com https://www.googletagmanager.com https://f.vimeocdn.com";
    set $CSP_CHILD      "child-src https://www.youtube.com https://player.vimeo.com";
    set $CSP_FRAME      "frame-src https://www.youtube.com https://player.vimeo.com";
    set $CSP_REPORT     "report-uri /csp_report";

    add_header Strict-Transport-Security "max-age=31536000";        # исключим возврат на http-версию сайта
    add_header Content-Security-Policy "$CSP_DEFAULT; $CSP_BLOCK; $CSP_FONT; $CSP_IMG; $CSP_STYLE; $CSP_SCRIPT; $CSP_CHILD; $CSP_FRAME; $CSP_REPORT;";

    server_name_in_redirect on;     # использовать в перенаправлениях основное имя сервера (server_name)
    port_in_redirect        off;    # не указывать порт в перенаправлениях

    # Правила перенаправления для частных случаев
    rewrite ^/photoalbum(.*)$ /photo$1 permanent;                   # photoalbum переехал в /photo
    rewrite ^/portfolio(.*)$ /photo$1 permanent;                    # portfolio переехал в photo
    rewrite ^/photo/lovestory/?$ /photo permanent;                  # отдельной страницы для lovestory не будет
    rewrite ^/photo/wedding/?$ /photo permanent;                    # отдельной страницы для wedding не будет
    rewrite ^/uslugi(.*)$ /more$1 permanent;                        # раздел "Услуги" стал называться "Ещё"
    rewrite ^/more/files/(.+\.([\w\d]+))$ /files/$1;                # файлы с сетевого диска возвращаются напрямую
    rewrite ^/more/files$ /more/files/ permanent;                   # добавляем в конце корневой папки слеш, если его не было
    rewrite ^/more/files/(.+[^/])$ /more/files/$1/ permanent;       # добавляем в конце папки слеш, если его не было
    rewrite ^/files/$ /more/files/ permanent;                       # корень сетевого диска закрыт от просмотра
    rewrite ^/ofa /back/ofa;                                        # подсчёт посещаемости
    rewrite ^/js/ofa.js /back/js/ofa.js;                            # скрипт подсчёта посещаемости

    # Запрещаем доступ к некоторым служебным файлам и папкам
    location /nginx.cfg     { deny all; return 404; }
    location = /back/dev    { deny all; return 404; }
    location /back/dev/     { deny all; return 404; }               # этот адрес нужен только для разработки на локалке

    location / {
        root /srv/okfilm_2018;

        location /        { return 404; }               # запретить всё, что не разрешено явно, даже не искать файлы
        location = /      { ssi on;   try_files /index.shtml =404; }
        location /include { try_files $uri =404; }

        location /photo   { ssi on;   rewrite (.*)/$ $1 permanent;   try_files /pages$uri.shtml =404; }
        location /video   { ssi on;   rewrite (.*)/$ $1 permanent;   try_files /pages$uri.shtml =404; }
        location /more    { ssi on;   rewrite (.*)/$ $1 permanent;   try_files /pages$uri.shtml =404; }
        location /price   { ssi on;   rewrite (.*)/$ $1 permanent;   try_files /pages$uri.shtml =404; }
        location /travel  { ssi on;   rewrite (.*)/$ $1 permanent;   try_files /pages$uri.shtml =404; }

        location /css     { expires 1w;   try_files $uri =404; }
        location /fonts   { expires 1w;   try_files $uri =404; }
        location /img     { expires 1w;   try_files $uri =404; }
        location /js      { expires 1w;   try_files $uri =404; }

        location /favicon { expires 1w;   try_files $uri =404; }
        location /robots  { expires 1w;   try_files $uri =404; }
        location /google  { expires 1w;   try_files $uri =404; }

        location = /more/files/ {
            ssi on;
            try_files /pages/more/files.shtml =404;
            set $shared_files /include/files_cap.html;  # путь к файлу на сетевом диске не указан - показываем заглушку
        }
        location ~* /more/files/(?<file_path>.*) {
            ssi on;
            try_files /pages/more/files.shtml =404;
            set $shared_files /files/$file_path;        # добавляем префикс к пути файла на сетевом диске
        }
    }

    # Сетевой диск для раздачи файлов. Вложенные папки, но не корень.
    # При попытке посмотреть корень, перебрасываем на страницу с файлами.
    location /files {
        alias /srv/shared-global;                       # Папка сетевого диска

        index protectionfromdisplayingindexfile.nofile; # Отключаем показ файлов index.html
        autoindex on;                                   # Включаем показ списка файлов в папке
        autoindex_exact_size off;
        autoindex_format html;
        autoindex_localtime on;

        # Если такого файла/папки не существует, показываем сообщение.
        try_files $uri $uri/ /include/files_not_found.html;

        # Делаем чтобы все файлы скачивались а не открывались.
        location ~* ^.*/(?P<filename>[^/]+\.([\w\d]+))$ {
            add_header Content-disposition 'attachment; filename="$filename"';
        }

        # Временно возвращаем json по отдельному пути, потом надо чтобы json возвращался по /files
        location /files/json {
            alias /srv/shared-global;                   # Папка сетевого диска
            autoindex_format json;
        }
    }

    location /csp_report {
        access_log /srv/logs/content-security-policy.log postdata;
        # Nginx doesn't parse the client request body unless it really needs to, so it usually does not fill the $request_body variable.
        # The exceptions are when it sends the request to a proxy, or a fastcgi server.
        proxy_pass http://127.0.0.1/csp_report_helper;
        proxy_http_version 1.1;
    }
    location /csp_report_helper {
        access_log off;
        default_type text/plain;
        return 200 ok;
    }

    # При запросе страниц бэковой части перебрасываем на эрланг
    location /back {
        # настройки проксирования на эрланг
        proxy_pass http://127.0.0.1:8738/back;
        proxy_http_version 1.1;
        proxy_set_header Host $host;                        # без особой надобности
        proxy_set_header X-Real-IP $remote_addr;            # для определения эрлангом реального IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # всё что ниже нужно для работы вебсокетов
        proxy_set_header Upgrade $http_upgrade;             # передаём заголовок "Upgrade: websocket", если он пришел от клиента
        proxy_set_header Connection $connection_upgrade;    # добавляем заголовок "Connection: Upgrade", если был передан заголовок "Upgrade: websocket"
        # Правила Content-Security-Policy
            set $CSP_B_DEFAULT  "default-src 'self'";
            set $CSP_B_BLOCK    "block-all-mixed-content";
            set $CSP_B_IMG      "img-src 'self' https:";
            set $CSP_B_STYLE    "style-src 'self' 'unsafe-inline' https://www.google.com https://ajax.googleapis.com";
            set $CSP_B_SCRIPT   "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com https://apis.google.com";
            set $CSP_B_FRAME    "frame-src https://accounts.google.com https://content.googleapis.com";
            set $CSP_B_REPORT   "report-uri /csp_report";
        add_header Content-Security-Policy "$CSP_B_DEFAULT; $CSP_B_BLOCK; $CSP_B_IMG; $CSP_B_STYLE; $CSP_B_SCRIPT; $CSP_B_FRAME; $CSP_B_REPORT;";
    }

    # для домашней страницы в браузере отдельные настройки CSP
    location /back/homepage {
        # настройки проксирования на эрланг
        proxy_pass http://127.0.0.1:8738/back/homepage;
        proxy_http_version 1.1;
        proxy_set_header Host $host;                        # без особой надобности
        proxy_set_header X-Real-IP $remote_addr;            # для определения эрлангом реального IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Правила Content-Security-Policy
        set $CSP_B_DEFAULT  "default-src 'self'";
        set $CSP_B_BLOCK    "block-all-mixed-content";
        set $CSP_B_IMG      "img-src 'self' https:";
        set $CSP_B_STYLE    "style-src 'self' 'unsafe-inline'";
        set $CSP_B_SCRIPT   "script-src 'self' 'unsafe-inline'";
        set $CSP_B_FRAME    "frame-src 'self'";
        set $CSP_B_REPORT   "report-uri /csp_report";
        add_header Content-Security-Policy "$CSP_B_DEFAULT; $CSP_B_BLOCK; $CSP_B_IMG; $CSP_B_STYLE; $CSP_B_SCRIPT; $CSP_B_FRAME; $CSP_B_REPORT;";
    }

    location /back/attendance_info {
        access_log off;
        proxy_pass http://127.0.0.1:8738/back/attendance_info;
        proxy_http_version 1.1;
    }
}


server {
    server_name         cdn.okfilm.com.ua;
    listen              443 ssl http2;
    keepalive_timeout   70;
    charset             utf-8;
    server_name_in_redirect on;
    include /etc/nginx/includes/okfilm/common_locations.conf;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";    # нужен для ssl_stapling
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_session_cache       shared:SSL:10m;
    ssl_session_timeout     30m;
    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    location / {
        root /srv/cdn;
        try_files $uri $uri/ =404;

        # Включаем кеширование указанных файлов в браузере.
        # Если какой-то из этих файлов изменится, следует изменить его
        # версию, имя или путь, чтобы браузер перекачал файл.(?v=1)
        location ~* ^.+\.(rss|atom|jpg|jpeg|gif|png|ico|rtf|js|css)$ {
            expires 1w;
        }
    }
}


server {
    server_name         h.okfilm.com.ua;
    listen              443 ssl http2;
    keepalive_timeout   70;
    charset             utf-8;
    include /etc/nginx/includes/okfilm/common_locations.conf;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";    # нужен для ssl_stapling
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_session_cache       shared:SSL:10m;
    ssl_session_timeout     30m;
    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    add_header Strict-Transport-Security "max-age=31536000";        # исключим возврат на http-версию сайта

    location / {
        return 301 https://okfilm.com.ua$request_uri;
    }

    # При запросе страниц бэковой части перебрасываем на эрланг
    location /back {
        # настройки проксирования на эрланг
        proxy_pass http://127.0.0.1:8738/back;
        proxy_http_version 1.1;
        proxy_set_header Host $host;                        # без особой надобности
        proxy_set_header X-Real-IP $remote_addr;            # для определения эрлангом реального IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # всё что ниже нужно для работы вебсокетов
        proxy_set_header Upgrade $http_upgrade;             # передаём заголовок "Upgrade: websocket", если он пришел от клиента
        proxy_set_header Connection $connection_upgrade;    # добавляем заголовок "Connection: Upgrade", если был передан заголовок "Upgrade: websocket"
        # Правила Content-Security-Policy
            set $CSP_B_DEFAULT  "default-src 'self'";
            set $CSP_B_BLOCK    "block-all-mixed-content";
            set $CSP_B_IMG      "img-src 'self'";
            set $CSP_B_STYLE    "style-src 'self' 'unsafe-inline' https://www.google.com https://ajax.googleapis.com";
            set $CSP_B_SCRIPT   "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com https://apis.google.com";
            set $CSP_B_FRAME    "frame-src https://accounts.google.com https://content.googleapis.com";
            set $CSP_B_REPORT   "report-uri /csp_report";
        add_header Content-Security-Policy "$CSP_B_DEFAULT; $CSP_B_BLOCK; $CSP_B_IMG; $CSP_B_STYLE; $CSP_B_SCRIPT; $CSP_B_FRAME; $CSP_B_REPORT;";
    }

    location /back/attendance_info {
        access_log off;
        proxy_pass http://127.0.0.1:8738/back/attendance_info;
        proxy_http_version 1.1;
    }
}

# Редирект с www на домен без www https
server {
    server_name www.okfilm.com.ua;
#    listen 80;
    listen 443;
#    listen [::]:80;                 # IPv6 адрес:порт
    return 301 https://okfilm.com.ua$request_uri;
}


server {
    server_name intellij.h.okfilm.com.ua  intellij.f.okfilm.com.ua;
    listen 1016;
    charset utf-8;
    include /etc/nginx/includes/okfilm/common_locations.conf;

    location / {
        # настройки проксирования на LicenseServer
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;                        # без особой надобности
    }
}

# Сайт маршруток Подгородного bus-pidgorodne.dp.ua
server {
    server_name         bus-pidgorodne.dp.ua;
    listen              443 ssl http2;
    keepalive_timeout   70;
    charset             utf-8;      # задаём кодировку отдаваемого контента (правильно именно utf-8 через дефис)
    include /etc/nginx/includes/okfilm/common_locations.conf;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";    # нужен для ssl_stapling
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_session_cache       shared:SSL:10m;
    ssl_session_timeout     30m;
    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    add_header Strict-Transport-Security "max-age=31536000";        # исключим возврат на http-версию сайта

    server_name_in_redirect on;     # использовать в перенаправлениях основное имя сервера (server_name)
    port_in_redirect        off;    # не указывать порт в перенаправлениях

    location / {
        # настройки проксирования на эрланг
        proxy_pass http://127.0.0.1:8717;
        proxy_http_version 1.1;
        proxy_set_header Host $host;                        # без особой надобности
        proxy_set_header X-Real-IP $remote_addr;            # для определения эрлангом реального IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

# Редирект с www на домен без www https
server {
    server_name www.bus-pidgorodne.dp.ua;
    #    listen 80;
    listen 443;
    #    listen [::]:80;                 # IPv6 адрес:порт
    return 301 https://bus-pidgorodne.dp.ua$request_uri;
}
